# Generated by Django 5.2.4 on 2025-07-30 11:06

import api.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField(default=4, verbose_name=api.models.MUserType)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('countryCode', models.CharField(default='+1', max_length=10)),
                ('country', models.IntegerField(db_column='country', null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('isMobileNoVerified', models.BooleanField(default=False)),
                ('is2FAEnabled', models.BooleanField(default=True)),
                ('isNotificationEnabled', models.BooleanField(default=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('isVerified', models.BooleanField(default=0)),
                ('changePwdOnLogin', models.IntegerField(default=0)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('passwordResetSalt', models.CharField(blank=True, max_length=100, null=True)),
                ('passwordResetFlag', models.BooleanField(blank=True, null=True)),
                ('createDate', models.DateTimeField(auto_now=True)),
                ('lastLoginTime', models.DateTimeField(blank=True, null=True)),
                ('lastLoginIp', models.CharField(blank=True, max_length=20, null=True)),
                ('profImage', models.CharField(blank=True, max_length=50, null=True)),
                ('originalProfImage', models.CharField(blank=True, db_column='originalProfImage', max_length=255, null=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'app_users',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'db_table': 'm_status',
                'managed': True,
                'indexes': [models.Index(fields=['name'], name='m_status_name_57fdd7_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExternalVendorConfig',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tag', models.CharField(blank=True, max_length=255, null=True)),
                ('config_detail', models.JSONField()),
                ('update_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.mstatus')),
            ],
            options={
                'db_table': 'external_vendor_config',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DailyQuestions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.TextField()),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('comment_count', models.PositiveIntegerField(default=0)),
                ('question_for', models.DateTimeField(default=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.customuser')),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.mstatus')),
            ],
            options={
                'db_table': 'daily_questions',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.mstatus'),
        ),
        migrations.CreateModel(
            name='MUserType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'db_table': 'm_user_type',
                'managed': True,
                'indexes': [models.Index(fields=['name'], name='m_user_type_name_219efe_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuestionLike',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='question_likes', to='api.dailyquestions')),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.mstatus')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customuser')),
            ],
            options={
                'db_table': 'question_like',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Reactions',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('voice_slug', models.CharField(max_length=255)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('transcript', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_reaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.reactions')),
                ('question', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='api.dailyquestions')),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='api.mstatus')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customuser')),
            ],
            options={
                'db_table': 'reaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ReactionLike',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='question_reaction_likes', to='api.dailyquestions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.customuser')),
                ('reaction', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='reaction_likes', to='api.reactions')),
            ],
            options={
                'db_table': 'reaction_like',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserStreak',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('current_streak', models.PositiveIntegerField(default=0)),
                ('last_active', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.customuser')),
            ],
            options={
                'db_table': 'user_streak',
                'managed': True,
            },
        ),
        migrations.AddIndex(
            model_name='dailyquestions',
            index=models.Index(fields=['status'], name='daily_quest_status__f51ed1_idx'),
        ),
        migrations.AddIndex(
            model_name='dailyquestions',
            index=models.Index(fields=['created_at'], name='daily_quest_created_e6692e_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='app_users_email_311d83_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['username'], name='app_users_usernam_670fd3_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['phone'], name='app_users_phone_679f0e_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['status'], name='app_users_status__42baac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customuser',
            unique_together={('email',), ('username',)},
        ),
        migrations.AddIndex(
            model_name='questionlike',
            index=models.Index(fields=['question'], name='question_li_questio_39dfd0_idx'),
        ),
        migrations.AddIndex(
            model_name='questionlike',
            index=models.Index(fields=['status'], name='question_li_status__9a8936_idx'),
        ),
        migrations.AddIndex(
            model_name='questionlike',
            index=models.Index(fields=['user'], name='question_li_user_id_f31b84_idx'),
        ),
        migrations.AddIndex(
            model_name='questionlike',
            index=models.Index(fields=['created_at'], name='question_li_created_659f10_idx'),
        ),
        migrations.AddIndex(
            model_name='reactions',
            index=models.Index(fields=['question'], name='reaction_questio_7e00ee_idx'),
        ),
        migrations.AddIndex(
            model_name='reactions',
            index=models.Index(fields=['user'], name='reaction_user_id_9a7f9f_idx'),
        ),
        migrations.AddIndex(
            model_name='reactions',
            index=models.Index(fields=['created_at'], name='reaction_created_a55a84_idx'),
        ),
        migrations.AddIndex(
            model_name='reactionlike',
            index=models.Index(fields=['reaction'], name='reaction_li_reactio_0ca31c_idx'),
        ),
        migrations.AddIndex(
            model_name='reactionlike',
            index=models.Index(fields=['question'], name='reaction_li_questio_8ffff2_idx'),
        ),
        migrations.AddIndex(
            model_name='userstreak',
            index=models.Index(fields=['user'], name='user_streak_user_id_02630b_idx'),
        ),
        migrations.AddIndex(
            model_name='userstreak',
            index=models.Index(fields=['last_active'], name='user_streak_last_ac_0496f9_idx'),
        ),
    ]
